#!/usr/bin/env python3
"""
Script de deploy para Raspberry Pi
"""

import os
import subprocess
import sys
import time

# Configura√ß√£o
RASPBERRY_IP = "192.168.15.8"
RASPBERRY_USER = "matheus"
RASPBERRY_PASS = "raspberry"
PROJECT_DIR = "/home/matheus/RaspMIDI"

def run_command(command, description):
    """Executa um comando e mostra o resultado"""
    print(f"\nüîß {description}")
    print(f"üìù Comando: {command}")
    
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        
        if result.stdout:
            print("‚úÖ Sa√≠da:")
            print(result.stdout)
        
        if result.stderr:
            print("‚ö†Ô∏è Erros:")
            print(result.stderr)
        
        if result.returncode != 0:
            print(f"‚ùå Comando falhou com c√≥digo {result.returncode}")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao executar comando: {e}")
        return False

def deploy():
    """Executa o deploy completo"""
    print("üöÄ Iniciando deploy para Raspberry Pi...")
    print(f"üìç IP: {RASPBERRY_IP}")
    print(f"üë§ Usu√°rio: {RASPBERRY_USER}")
    print(f"üìÅ Diret√≥rio: {PROJECT_DIR}")
    
    # 1. Para o servi√ßo
    print("\n" + "="*50)
    print("üõë PARANDO SERVI√áO")
    print("="*50)
    
    stop_cmd = f'sshpass -p "{RASPBERRY_PASS}" ssh -o StrictHostKeyChecking=no {RASPBERRY_USER}@{RASPBERRY_IP} "sudo systemctl stop raspmidi.service"'
    if not run_command(stop_cmd, "Parando servi√ßo raspmidi"):
        print("‚ö†Ô∏è Aviso: N√£o foi poss√≠vel parar o servi√ßo")
    
    # 2. Atualiza o c√≥digo
    print("\n" + "="*50)
    print("üì• ATUALIZANDO C√ìDIGO")
    print("="*50)
    
    update_cmd = f'sshpass -p "{RASPBERRY_PASS}" ssh -o StrictHostKeyChecking=no {RASPBERRY_USER}@{RASPBERRY_IP} "cd {PROJECT_DIR} && git pull origin main"'
    if not run_command(update_cmd, "Atualizando c√≥digo via git"):
        print("‚ùå Falha ao atualizar c√≥digo")
        return False
    
    # 3. Instala depend√™ncias
    print("\n" + "="*50)
    print("üì¶ INSTALANDO DEPEND√äNCIAS")
    print("="*50)
    
    deps_cmd = f'sshpass -p "{RASPBERRY_PASS}" ssh -o StrictHostKeyChecking=no {RASPBERRY_USER}@{RASPBERRY_IP} "cd {PROJECT_DIR} && source venv/bin/activate && pip install -r requirements.txt"'
    if not run_command(deps_cmd, "Instalando depend√™ncias Python"):
        print("‚ùå Falha ao instalar depend√™ncias")
        return False
    
    # 4. Reinicia o servi√ßo
    print("\n" + "="*50)
    print("üîÑ REINICIANDO SERVI√áO")
    print("="*50)
    
    start_cmd = f'sshpass -p "{RASPBERRY_PASS}" ssh -o StrictHostKeyChecking=no {RASPBERRY_USER}@{RASPBERRY_IP} "sudo systemctl start raspmidi.service"'
    if not run_command(start_cmd, "Reiniciando servi√ßo raspmidi"):
        print("‚ùå Falha ao reiniciar servi√ßo")
        return False
    
    # 5. Verifica status
    print("\n" + "="*50)
    print("‚úÖ VERIFICANDO STATUS")
    print("="*50)
    
    status_cmd = f'sshpass -p "{RASPBERRY_PASS}" ssh -o StrictHostKeyChecking=no {RASPBERRY_USER}@{RASPBERRY_IP} "sudo systemctl status raspmidi.service"'
    run_command(status_cmd, "Verificando status do servi√ßo")
    
    # 6. Testa conectividade
    print("\n" + "="*50)
    print("üåê TESTANDO CONECTIVIDADE")
    print("="*50)
    
    print("‚è≥ Aguardando 5 segundos para o servi√ßo inicializar...")
    time.sleep(5)
    
    test_cmd = f'curl -s http://{RASPBERRY_IP}:5000/api/status'
    if run_command(test_cmd, "Testando API"):
        print("‚úÖ API est√° respondendo!")
    else:
        print("‚ùå API n√£o est√° respondendo")
    
    print("\n" + "="*50)
    print("üéâ DEPLOY CONCLU√çDO!")
    print("="*50)
    print(f"üåê Acesse: http://{RASPBERRY_IP}:5000")
    
    return True

if __name__ == "__main__":
    try:
        success = deploy()
        if success:
            print("\n‚úÖ Deploy realizado com sucesso!")
            sys.exit(0)
        else:
            print("\n‚ùå Deploy falhou!")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Deploy interrompido pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        sys.exit(1) 