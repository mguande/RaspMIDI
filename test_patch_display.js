// Script de teste para verificar a nova exibi√ß√£o de patches
console.log('üîß Testando nova exibi√ß√£o de patches...');

// Fun√ß√£o para testar a renderiza√ß√£o de patches
function testPatchDisplay() {
    console.log('üìã Testando renderiza√ß√£o de patches...');
    
    // Simula patches de teste
    const testPatches = [
        {
            id: 1,
            name: 'Patch Teste PC',
            command_type: 'pc',
            input_device: 'Chocolate MIDI',
            input_channel: 1,
            output_device: 'Zoom G3X',
            zoom_bank: 'A',
            zoom_patch: 0,
            effects: null
        },
        {
            id: 2,
            name: 'Patch Teste Effects',
            command_type: 'effects_config',
            input_device: 'Chocolate MIDI',
            input_channel: 2,
            output_device: 'Zoom G3X',
            zoom_bank: 'B',
            zoom_patch: 1,
            effects: {
                'FX1': { enabled: true },
                'FX2': { enabled: false },
                'FX3': { enabled: true },
                'FX4': { enabled: false },
                'FX5': { enabled: true },
                'FX6': { enabled: false }
            }
        },
        {
            id: 3,
            name: 'Patch Teste CC',
            command_type: 'cc',
            input_device: 'Chocolate MIDI',
            input_channel: 3,
            output_device: 'Zoom G3X',
            cc: 1,
            value: 127,
            effects: null
        }
    ];
    
    // Testa a fun√ß√£o createPatchCard
    testPatches.forEach((patch, index) => {
        console.log(`\nüîç Testando patch ${index + 1}: ${patch.name}`);
        
        try {
            const cardHtml = app.createPatchCard(patch);
            console.log('‚úÖ Card HTML gerado com sucesso');
            
            // Verifica se cont√©m as caixas de entrada e sa√≠da
            if (cardHtml.includes('input-box') && cardHtml.includes('output-box')) {
                console.log('‚úÖ Caixas de entrada/sa√≠da encontradas');
            } else {
                console.log('‚ùå Caixas de entrada/sa√≠da n√£o encontradas');
            }
            
            // Verifica efeitos apenas para patches de configura√ß√£o
            if (patch.command_type === 'effects_config') {
                if (cardHtml.includes('patch-effects-section')) {
                    console.log('‚úÖ Se√ß√£o de efeitos encontrada');
                } else {
                    console.log('‚ùå Se√ß√£o de efeitos n√£o encontrada');
                }
            } else {
                if (!cardHtml.includes('patch-effects-section')) {
                    console.log('‚úÖ Efeitos corretamente omitidos para patch PC/CC');
                } else {
                    console.log('‚ùå Efeitos n√£o deveriam aparecer neste patch');
                }
            }
            
        } catch (error) {
            console.error('‚ùå Erro ao gerar card:', error);
        }
    });
}

// Fun√ß√£o para testar navega√ß√£o
function testNavigation() {
    console.log('\nüß≠ Testando navega√ß√£o...');
    
    try {
        // Testa navega√ß√£o para patches
        app.navigateToSection('patches');
        console.log('‚úÖ Navega√ß√£o para patches executada');
        
        // Aguarda um pouco e testa carregamento
        setTimeout(() => {
            console.log('‚è≥ Aguardando carregamento de patches...');
            
            const patchesContainer = document.getElementById('patches-container');
            if (patchesContainer) {
                console.log('‚úÖ Container de patches encontrado');
                
                if (patchesContainer.innerHTML.includes('patch-info-grid')) {
                    console.log('‚úÖ Nova estrutura de grid encontrada');
                } else {
                    console.log('‚ùå Nova estrutura de grid n√£o encontrada');
                }
            } else {
                console.log('‚ùå Container de patches n√£o encontrado');
            }
        }, 2000);
        
    } catch (error) {
        console.error('‚ùå Erro na navega√ß√£o:', error);
    }
}

// Fun√ß√£o para verificar estilos CSS
function checkCSS() {
    console.log('\nüé® Verificando estilos CSS...');
    
    const styleSheets = document.styleSheets;
    let foundStyles = false;
    
    for (let i = 0; i < styleSheets.length; i++) {
        try {
            const rules = styleSheets[i].cssRules || styleSheets[i].rules;
            for (let j = 0; j < rules.length; j++) {
                const rule = rules[j];
                if (rule.selectorText && rule.selectorText.includes('patch-info-box')) {
                    console.log('‚úÖ Estilos de patch-info-box encontrados');
                    foundStyles = true;
                }
                if (rule.selectorText && rule.selectorText.includes('patch-effect-box')) {
                    console.log('‚úÖ Estilos de patch-effect-box encontrados');
                    foundStyles = true;
                }
            }
        } catch (e) {
            // Ignora erros de CORS
        }
    }
    
    if (!foundStyles) {
        console.log('‚ö†Ô∏è Estilos n√£o encontrados (pode ser problema de CORS)');
    }
}

// Executa os testes
console.log('üöÄ Iniciando testes...\n');

// Aguarda um pouco para garantir que a p√°gina carregou
setTimeout(() => {
    testPatchDisplay();
    checkCSS();
    testNavigation();
    
    console.log('\n‚ú® Testes conclu√≠dos!');
    console.log('\nüìù Instru√ß√µes:');
    console.log('1. Navegue para a se√ß√£o "Patches" no menu');
    console.log('2. Verifique se os patches aparecem com as novas caixas coloridas');
    console.log('3. Verifique se os efeitos s√≥ aparecem nos patches de configura√ß√£o');
    console.log('4. Teste em diferentes tamanhos de tela para responsividade');
}, 1000); 