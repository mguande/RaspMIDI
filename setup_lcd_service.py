#!/usr/bin/env python3
"""
Script para configurar o servi√ßo LCD no Raspberry Pi
"""

import paramiko
import time

# Configura√ß√µes do Raspberry Pi
RASPBERRY_IP = "192.168.15.8"
RASPBERRY_USER = "matheus"
RASPBERRY_PASSWORD = "matheus"

def run_ssh_command(command, timeout=30):
    """Executa comando SSH no Raspberry Pi"""
    try:
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(RASPBERRY_IP, username=RASPBERRY_USER, password=RASPBERRY_PASSWORD, timeout=timeout)
        
        stdin, stdout, stderr = client.exec_command(command, timeout=timeout)
        output = stdout.read().decode().strip()
        error = stderr.read().decode().strip()
        exit_code = stdout.channel.recv_exit_status()
        
        client.close()
        return exit_code, output, error
    except Exception as e:
        return -1, "", str(e)

def main():
    print("üîß Configurando servi√ßo LCD...")
    print()
    
    # 1. Instalar depend√™ncias Python
    print("1. Instalando depend√™ncias Python...")
    dependencies = [
        "pygame",
        "pillow",
        "mido",
        "python-rtmidi"
    ]
    
    for dep in dependencies:
        print(f"  - Instalando {dep}...")
        exit_code, output, error = run_ssh_command(f"source ~/RaspMIDI/venv/bin/activate && pip install {dep}")
        if exit_code == 0:
            print(f"    ‚úÖ {dep} instalado")
        else:
            print(f"    ‚ùå Erro ao instalar {dep}: {error}")
    
    print()
    
    # 2. Configurar framebuffer
    print("2. Configurando framebuffer...")
    exit_code, output, error = run_ssh_command("sudo modprobe fbtft_device name=mpi3501 gpios=reset:25,dc:24,led:18 speed=32000000 rotate=90")
    if exit_code == 0:
        print("‚úÖ Driver LCD carregado")
    else:
        print(f"‚ùå Erro ao carregar driver: {error}")
    
    # Mapear console para fb1
    exit_code, output, error = run_ssh_command("sudo con2fbmap 1 1")
    if exit_code == 0:
        print("‚úÖ Console mapeado para fb1")
    else:
        print(f"‚ùå Erro ao mapear console: {error}")
    
    print()
    
    # 3. Configurar permiss√µes
    print("3. Configurando permiss√µes...")
    exit_code, output, error = run_ssh_command("sudo chmod 666 /dev/fb1")
    if exit_code == 0:
        print("‚úÖ Permiss√µes do framebuffer configuradas")
    else:
        print(f"‚ùå Erro ao configurar permiss√µes: {error}")
    
    # Adicionar usu√°rio ao grupo video
    exit_code, output, error = run_ssh_command("sudo usermod -a -G video matheus")
    if exit_code == 0:
        print("‚úÖ Usu√°rio adicionado ao grupo video")
    else:
        print(f"‚ùå Erro ao adicionar ao grupo: {error}")
    
    print()
    
    # 4. Instalar servi√ßo systemd
    print("4. Instalando servi√ßo systemd...")
    exit_code, output, error = run_ssh_command("sudo cp ~/RaspMIDI/raspmidi-lcd.service /etc/systemd/system/")
    if exit_code == 0:
        print("‚úÖ Arquivo de servi√ßo copiado")
    else:
        print(f"‚ùå Erro ao copiar servi√ßo: {error}")
    
    # Recarregar systemd
    exit_code, output, error = run_ssh_command("sudo systemctl daemon-reload")
    if exit_code == 0:
        print("‚úÖ Systemd recarregado")
    else:
        print(f"‚ùå Erro ao recarregar systemd: {error}")
    
    # Habilitar servi√ßo
    exit_code, output, error = run_ssh_command("sudo systemctl enable raspmidi-lcd.service")
    if exit_code == 0:
        print("‚úÖ Servi√ßo habilitado")
    else:
        print(f"‚ùå Erro ao habilitar servi√ßo: {error}")
    
    print()
    
    # 5. Configurar rc.local para garantir framebuffer
    print("5. Configurando rc.local...")
    exit_code, output, error = run_ssh_command("sudo sh -c 'echo \"# Configura√ß√£o LCD MPI3501\" >> /etc/rc.local'")
    if exit_code == 0:
        print("‚úÖ Coment√°rio adicionado ao rc.local")
    
    exit_code, output, error = run_ssh_command("sudo sh -c 'echo \"modprobe fbtft_device name=mpi3501 gpios=reset:25,dc:24,led:18 speed=32000000 rotate=90\" >> /etc/rc.local'")
    if exit_code == 0:
        print("‚úÖ Driver LCD adicionado ao rc.local")
    
    exit_code, output, error = run_ssh_command("sudo sh -c 'echo \"sleep 5\" >> /etc/rc.local'")
    if exit_code == 0:
        print("‚úÖ Aguardo adicionado ao rc.local")
    
    exit_code, output, error = run_ssh_command("sudo sh -c 'echo \"con2fbmap 1 1\" >> /etc/rc.local'")
    if exit_code == 0:
        print("‚úÖ Mapeamento de console adicionado ao rc.local")
    
    exit_code, output, error = run_ssh_command("sudo sh -c 'echo \"chmod 666 /dev/fb1\" >> /etc/rc.local'")
    if exit_code == 0:
        print("‚úÖ Permiss√µes adicionadas ao rc.local")
    
    print()
    
    # 6. Criar script de teste
    print("6. Criando script de teste...")
    test_script = """#!/bin/bash
# Script para testar o servi√ßo LCD
echo "üß™ Testando servi√ßo LCD..."

# Verificar se o framebuffer est√° dispon√≠vel
if [ -e /dev/fb1 ]; then
    echo "‚úÖ Framebuffer /dev/fb1 dispon√≠vel"
else
    echo "‚ùå Framebuffer /dev/fb1 n√£o encontrado"
    exit 1
fi

# Verificar se o servi√ßo est√° rodando
if sudo systemctl is-active --quiet raspmidi-lcd.service; then
    echo "‚úÖ Servi√ßo LCD est√° rodando"
else
    echo "‚ùå Servi√ßo LCD n√£o est√° rodando"
    echo "Iniciando servi√ßo..."
    sudo systemctl start raspmidi-lcd.service
    sleep 3
    
    if sudo systemctl is-active --quiet raspmidi-lcd.service; then
        echo "‚úÖ Servi√ßo LCD iniciado com sucesso"
    else
        echo "‚ùå Falha ao iniciar servi√ßo LCD"
        sudo systemctl status raspmidi-lcd.service
    fi
fi

# Verificar logs
echo "üìã √öltimos logs do servi√ßo LCD:"
sudo journalctl -u raspmidi-lcd.service -n 10 --no-pager
"""
    
    # Salva o script de teste
    with open("test_lcd_service.sh", "w", encoding="utf-8") as f:
        f.write(test_script)
    
    # Copia para o Raspberry Pi
    try:
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(RASPBERRY_IP, username=RASPBERRY_USER, password=RASPBERRY_PASSWORD, timeout=10)
        
        sftp = client.open_sftp()
        sftp.put("test_lcd_service.sh", "/tmp/test_lcd_service.sh")
        sftp.close()
        client.close()
        
        # Move e configura o script de teste
        exit_code, output, error = run_ssh_command("mv /tmp/test_lcd_service.sh ~/test_lcd_service.sh && chmod +x ~/test_lcd_service.sh")
        if exit_code == 0:
            print("‚úÖ Script de teste criado")
        else:
            print(f"‚ùå Erro ao criar script de teste: {error}")
            
    except Exception as e:
        print(f"‚ùå Erro ao copiar script de teste: {e}")
    
    print()
    print("üéâ Configura√ß√£o do servi√ßo LCD conclu√≠da!")
    print()
    print("üìã Sequ√™ncia de inicializa√ß√£o ap√≥s reiniciar:")
    print("1. Sistema inicia")
    print("2. rc.local carrega driver LCD e configura framebuffer")
    print("3. Servi√ßo raspmidi.service inicia")
    print("4. Servi√ßo raspmidi-lcd.service inicia")
    print("5. LCD mostra informa√ß√µes em tempo real")
    print()
    print("üîß Comandos √∫teis:")
    print("- Testar agora: ~/test_lcd_service.sh")
    print("- Ver logs: sudo journalctl -u raspmidi-lcd.service -f")
    print("- Reiniciar servi√ßo: sudo systemctl restart raspmidi-lcd.service")
    print("- Ver status: sudo systemctl status raspmidi-lcd.service")
    print("- Reiniciar para testar: sudo reboot")

if __name__ == "__main__":
    main() 